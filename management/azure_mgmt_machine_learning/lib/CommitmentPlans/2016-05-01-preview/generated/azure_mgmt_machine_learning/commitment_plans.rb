# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::MachineLearning::CommitmentPlans::Api_2016_05_01_preview
  #
  # These APIs allow end users to operate on Azure Machine Learning Commitment
  # Plans resources and their child Commitment Association resources. They
  # support CRUD operations for commitment plans, get and list operations for
  # commitment associations, moving commitment associations between commitment
  # plans, and retrieving commitment plan usage history.
  #
  class CommitmentPlans
    include MsRestAzure

    #
    # Creates and initializes a new instance of the CommitmentPlans class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AzureMLCommitmentPlansManagementClient] reference to the AzureMLCommitmentPlansManagementClient
    attr_reader :client

    #
    # Retrieve an Azure ML commitment plan by its subscription, resource group and
    # name.
    #
    # @param resource_group_name [String] The resource group name.
    # @param commitment_plan_name [String] The Azure ML commitment plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CommitmentPlan] operation results.
    #
    def get(resource_group_name, commitment_plan_name, custom_headers = nil)
      response = get_async(resource_group_name, commitment_plan_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieve an Azure ML commitment plan by its subscription, resource group and
    # name.
    #
    # @param resource_group_name [String] The resource group name.
    # @param commitment_plan_name [String] The Azure ML commitment plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(resource_group_name, commitment_plan_name, custom_headers = nil)
      get_async(resource_group_name, commitment_plan_name, custom_headers).value!
    end

    #
    # Retrieve an Azure ML commitment plan by its subscription, resource group and
    # name.
    #
    # @param resource_group_name [String] The resource group name.
    # @param commitment_plan_name [String] The Azure ML commitment plan name.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(resource_group_name, commitment_plan_name, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'commitment_plan_name is nil' if commitment_plan_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'commitmentPlanName' => commitment_plan_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::MachineLearning::CommitmentPlans::Api_2016_05_01_preview::Models::CommitmentPlan.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create a new Azure ML commitment plan resource or updates an existing one.
    #
    # @param create_or_update_payload [CommitmentPlan] The payload to create or
    # update the Azure ML commitment plan.
    # @param resource_group_name [String] The resource group name.
    # @param commitment_plan_name [String] The Azure ML commitment plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CommitmentPlan] operation results.
    #
    def create_or_update(create_or_update_payload, resource_group_name, commitment_plan_name, custom_headers = nil)
      response = create_or_update_async(create_or_update_payload, resource_group_name, commitment_plan_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create a new Azure ML commitment plan resource or updates an existing one.
    #
    # @param create_or_update_payload [CommitmentPlan] The payload to create or
    # update the Azure ML commitment plan.
    # @param resource_group_name [String] The resource group name.
    # @param commitment_plan_name [String] The Azure ML commitment plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_or_update_with_http_info(create_or_update_payload, resource_group_name, commitment_plan_name, custom_headers = nil)
      create_or_update_async(create_or_update_payload, resource_group_name, commitment_plan_name, custom_headers).value!
    end

    #
    # Create a new Azure ML commitment plan resource or updates an existing one.
    #
    # @param create_or_update_payload [CommitmentPlan] The payload to create or
    # update the Azure ML commitment plan.
    # @param resource_group_name [String] The resource group name.
    # @param commitment_plan_name [String] The Azure ML commitment plan name.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_or_update_async(create_or_update_payload, resource_group_name, commitment_plan_name, custom_headers = nil)
      fail ArgumentError, 'create_or_update_payload is nil' if create_or_update_payload.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'commitment_plan_name is nil' if commitment_plan_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::ARM::MachineLearning::CommitmentPlans::Api_2016_05_01_preview::Models::CommitmentPlan.mapper()
      request_content = @client.serialize(request_mapper,  create_or_update_payload)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'commitmentPlanName' => commitment_plan_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::MachineLearning::CommitmentPlans::Api_2016_05_01_preview::Models::CommitmentPlan.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::MachineLearning::CommitmentPlans::Api_2016_05_01_preview::Models::CommitmentPlan.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Remove an existing Azure ML commitment plan.
    #
    # @param resource_group_name [String] The resource group name.
    # @param commitment_plan_name [String] The Azure ML commitment plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def remove(resource_group_name, commitment_plan_name, custom_headers = nil)
      response = remove_async(resource_group_name, commitment_plan_name, custom_headers).value!
      nil
    end

    #
    # Remove an existing Azure ML commitment plan.
    #
    # @param resource_group_name [String] The resource group name.
    # @param commitment_plan_name [String] The Azure ML commitment plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def remove_with_http_info(resource_group_name, commitment_plan_name, custom_headers = nil)
      remove_async(resource_group_name, commitment_plan_name, custom_headers).value!
    end

    #
    # Remove an existing Azure ML commitment plan.
    #
    # @param resource_group_name [String] The resource group name.
    # @param commitment_plan_name [String] The Azure ML commitment plan name.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def remove_async(resource_group_name, commitment_plan_name, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'commitment_plan_name is nil' if commitment_plan_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'commitmentPlanName' => commitment_plan_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Patch an existing Azure ML commitment plan resource.
    #
    # @param patch_payload [CommitmentPlanPatchPayload] The payload to use to patch
    # the Azure ML commitment plan. Only tags and SKU may be modified on an
    # existing commitment plan.
    # @param resource_group_name [String] The resource group name.
    # @param commitment_plan_name [String] The Azure ML commitment plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CommitmentPlan] operation results.
    #
    def patch(patch_payload, resource_group_name, commitment_plan_name, custom_headers = nil)
      response = patch_async(patch_payload, resource_group_name, commitment_plan_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Patch an existing Azure ML commitment plan resource.
    #
    # @param patch_payload [CommitmentPlanPatchPayload] The payload to use to patch
    # the Azure ML commitment plan. Only tags and SKU may be modified on an
    # existing commitment plan.
    # @param resource_group_name [String] The resource group name.
    # @param commitment_plan_name [String] The Azure ML commitment plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def patch_with_http_info(patch_payload, resource_group_name, commitment_plan_name, custom_headers = nil)
      patch_async(patch_payload, resource_group_name, commitment_plan_name, custom_headers).value!
    end

    #
    # Patch an existing Azure ML commitment plan resource.
    #
    # @param patch_payload [CommitmentPlanPatchPayload] The payload to use to patch
    # the Azure ML commitment plan. Only tags and SKU may be modified on an
    # existing commitment plan.
    # @param resource_group_name [String] The resource group name.
    # @param commitment_plan_name [String] The Azure ML commitment plan name.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def patch_async(patch_payload, resource_group_name, commitment_plan_name, custom_headers = nil)
      fail ArgumentError, 'patch_payload is nil' if patch_payload.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'commitment_plan_name is nil' if commitment_plan_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::ARM::MachineLearning::CommitmentPlans::Api_2016_05_01_preview::Models::CommitmentPlanPatchPayload.mapper()
      request_content = @client.serialize(request_mapper,  patch_payload)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'commitmentPlanName' => commitment_plan_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::MachineLearning::CommitmentPlans::Api_2016_05_01_preview::Models::CommitmentPlan.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieve all Azure ML commitment plans in a subscription.
    #
    # @param skip_token [String] Continuation token for pagination.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<CommitmentPlan>] operation results.
    #
    def list(skip_token = nil, custom_headers = nil)
      first_page = list_as_lazy(skip_token, custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieve all Azure ML commitment plans in a subscription.
    #
    # @param skip_token [String] Continuation token for pagination.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(skip_token = nil, custom_headers = nil)
      list_async(skip_token, custom_headers).value!
    end

    #
    # Retrieve all Azure ML commitment plans in a subscription.
    #
    # @param skip_token [String] Continuation token for pagination.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(skip_token = nil, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/providers/Microsoft.MachineLearning/commitmentPlans'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id},
          query_params: {'$skipToken' => skip_token,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::MachineLearning::CommitmentPlans::Api_2016_05_01_preview::Models::CommitmentPlanListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieve all Azure ML commitment plans in a resource group.
    #
    # @param resource_group_name [String] The resource group name.
    # @param skip_token [String] Continuation token for pagination.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<CommitmentPlan>] operation results.
    #
    def list_in_resource_group(resource_group_name, skip_token = nil, custom_headers = nil)
      first_page = list_in_resource_group_as_lazy(resource_group_name, skip_token, custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieve all Azure ML commitment plans in a resource group.
    #
    # @param resource_group_name [String] The resource group name.
    # @param skip_token [String] Continuation token for pagination.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_in_resource_group_with_http_info(resource_group_name, skip_token = nil, custom_headers = nil)
      list_in_resource_group_async(resource_group_name, skip_token, custom_headers).value!
    end

    #
    # Retrieve all Azure ML commitment plans in a resource group.
    #
    # @param resource_group_name [String] The resource group name.
    # @param skip_token [String] Continuation token for pagination.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_in_resource_group_async(resource_group_name, skip_token = nil, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name},
          query_params: {'$skipToken' => skip_token,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::MachineLearning::CommitmentPlans::Api_2016_05_01_preview::Models::CommitmentPlanListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieve all Azure ML commitment plans in a subscription.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CommitmentPlanListResult] operation results.
    #
    def list_next(next_page_link, custom_headers = nil)
      response = list_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieve all Azure ML commitment plans in a subscription.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_next_with_http_info(next_page_link, custom_headers = nil)
      list_next_async(next_page_link, custom_headers).value!
    end

    #
    # Retrieve all Azure ML commitment plans in a subscription.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::MachineLearning::CommitmentPlans::Api_2016_05_01_preview::Models::CommitmentPlanListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieve all Azure ML commitment plans in a resource group.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CommitmentPlanListResult] operation results.
    #
    def list_in_resource_group_next(next_page_link, custom_headers = nil)
      response = list_in_resource_group_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieve all Azure ML commitment plans in a resource group.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_in_resource_group_next_with_http_info(next_page_link, custom_headers = nil)
      list_in_resource_group_next_async(next_page_link, custom_headers).value!
    end

    #
    # Retrieve all Azure ML commitment plans in a resource group.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_in_resource_group_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::MachineLearning::CommitmentPlans::Api_2016_05_01_preview::Models::CommitmentPlanListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieve all Azure ML commitment plans in a subscription.
    #
    # @param skip_token [String] Continuation token for pagination.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CommitmentPlanListResult] which provide lazy access to pages of the
    # response.
    #
    def list_as_lazy(skip_token = nil, custom_headers = nil)
      response = list_async(skip_token, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_next_async(next_page_link, custom_headers)
        end
        page
      end
    end

    #
    # Retrieve all Azure ML commitment plans in a resource group.
    #
    # @param resource_group_name [String] The resource group name.
    # @param skip_token [String] Continuation token for pagination.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CommitmentPlanListResult] which provide lazy access to pages of the
    # response.
    #
    def list_in_resource_group_as_lazy(resource_group_name, skip_token = nil, custom_headers = nil)
      response = list_in_resource_group_async(resource_group_name, skip_token, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_in_resource_group_next_async(next_page_link, custom_headers)
        end
        page
      end
    end

  end
end
