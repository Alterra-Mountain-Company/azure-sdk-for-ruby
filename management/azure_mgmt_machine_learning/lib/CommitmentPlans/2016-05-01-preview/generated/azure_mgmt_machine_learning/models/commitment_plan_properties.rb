# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::MachineLearning::CommitmentPlans::Api_2016_05_01_preview
  module Models
    #
    # Properties of an Azure ML commitment plan.
    #
    class CommitmentPlanProperties

      include MsRestAzure

      include MsRest::JSONable
      # @return [Boolean] Indicates whether usage beyond the commitment plan's
      # included quantities will be charged.
      attr_accessor :charge_for_overage

      # @return [Boolean] Indicates whether the commitment plan will incur a
      # charge.
      attr_accessor :charge_for_plan

      # @return [DateTime] The date at which this commitment plan was created,
      # in ISO 8601 format.
      attr_accessor :creation_date

      # @return [Hash{String => PlanQuantity}] The included resource quantities
      # this plan gives you.
      attr_accessor :included_quantities

      # @return [Integer] The maximum number of commitment associations that
      # can be children of this commitment plan.
      attr_accessor :max_association_limit

      # @return [Integer] The maximum scale-out capacity for this commitment
      # plan.
      attr_accessor :max_capacity_limit

      # @return [Integer] The minimum scale-out capacity for this commitment
      # plan.
      attr_accessor :min_capacity_limit

      # @return [String] The Azure meter which will be used to charge for this
      # commitment plan.
      attr_accessor :plan_meter

      # @return [Integer] The frequency at which this commitment plan's
      # included quantities are refilled.
      attr_accessor :refill_frequency_in_days

      # @return [Boolean] Indicates whether this commitment plan will be moved
      # into a suspended state if usage goes beyond the commitment plan's
      # included quantities.
      attr_accessor :suspend_plan_on_overage


      #
      # Mapper for CommitmentPlanProperties class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          required: false,
          serialized_name: 'CommitmentPlanProperties',
          type: {
            name: 'Composite',
            class_name: 'CommitmentPlanProperties',
            model_properties: {
              charge_for_overage: {
                required: false,
                read_only: true,
                serialized_name: 'chargeForOverage',
                type: {
                  name: 'Boolean'
                }
              },
              charge_for_plan: {
                required: false,
                read_only: true,
                serialized_name: 'chargeForPlan',
                type: {
                  name: 'Boolean'
                }
              },
              creation_date: {
                required: false,
                read_only: true,
                serialized_name: 'creationDate',
                type: {
                  name: 'DateTime'
                }
              },
              included_quantities: {
                required: false,
                read_only: true,
                serialized_name: 'includedQuantities',
                type: {
                  name: 'Dictionary',
                  value: {
                      required: false,
                      serialized_name: 'PlanQuantityElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'PlanQuantity'
                      }
                  }
                }
              },
              max_association_limit: {
                required: false,
                read_only: true,
                serialized_name: 'maxAssociationLimit',
                type: {
                  name: 'Number'
                }
              },
              max_capacity_limit: {
                required: false,
                read_only: true,
                serialized_name: 'maxCapacityLimit',
                type: {
                  name: 'Number'
                }
              },
              min_capacity_limit: {
                required: false,
                read_only: true,
                serialized_name: 'minCapacityLimit',
                type: {
                  name: 'Number'
                }
              },
              plan_meter: {
                required: false,
                read_only: true,
                serialized_name: 'planMeter',
                type: {
                  name: 'String'
                }
              },
              refill_frequency_in_days: {
                required: false,
                read_only: true,
                serialized_name: 'refillFrequencyInDays',
                type: {
                  name: 'Number'
                }
              },
              suspend_plan_on_overage: {
                required: false,
                read_only: true,
                serialized_name: 'suspendPlanOnOverage',
                type: {
                  name: 'Boolean'
                }
              }
            }
          }
        }
      end
    end
  end
end
