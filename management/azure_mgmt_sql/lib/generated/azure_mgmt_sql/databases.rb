# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::SQL
  #
  # Composite Swagger for Azure Sql Database Client
  #
  class Databases
    include Azure::ARM::SQL::Models
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Databases class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [SqlManagementClient] reference to the SqlManagementClient
    attr_reader :client

    #
    # Pause an Azure SQL Data Warehouse database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Data Warehouse
    # database to pause.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def pause_data_warehouse(resource_group_name, server_name, database_name, custom_headers = nil)
      response = pause_data_warehouse_async(resource_group_name, server_name, database_name, custom_headers).value!
      nil
    end

    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Data Warehouse
    # database to pause.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def pause_data_warehouse_async(resource_group_name, server_name, database_name, custom_headers = nil)
      # Send request
      promise = begin_pause_data_warehouse_async(resource_group_name, server_name, database_name, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Pause an Azure SQL Data Warehouse database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Data Warehouse
    # database to pause.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_pause_data_warehouse(resource_group_name, server_name, database_name, custom_headers = nil)
      response = begin_pause_data_warehouse_async(resource_group_name, server_name, database_name, custom_headers).value!
      nil
    end

    #
    # Pause an Azure SQL Data Warehouse database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Data Warehouse
    # database to pause.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_pause_data_warehouse_with_http_info(resource_group_name, server_name, database_name, custom_headers = nil)
      begin_pause_data_warehouse_async(resource_group_name, server_name, database_name, custom_headers).value!
    end

    #
    # Pause an Azure SQL Data Warehouse database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Data Warehouse
    # database to pause.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_pause_data_warehouse_async(resource_group_name, server_name, database_name, custom_headers = nil)
      api_version = '2014-04-01'
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'server_name is nil' if server_name.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/pause'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'serverName' => server_name,'databaseName' => database_name},
          query_params: {'api-version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Resume an Azure SQL Data Warehouse database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Data Warehouse
    # database to resume.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def resume_data_warehouse(resource_group_name, server_name, database_name, custom_headers = nil)
      response = resume_data_warehouse_async(resource_group_name, server_name, database_name, custom_headers).value!
      nil
    end

    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Data Warehouse
    # database to resume.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def resume_data_warehouse_async(resource_group_name, server_name, database_name, custom_headers = nil)
      # Send request
      promise = begin_resume_data_warehouse_async(resource_group_name, server_name, database_name, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Resume an Azure SQL Data Warehouse database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Data Warehouse
    # database to resume.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_resume_data_warehouse(resource_group_name, server_name, database_name, custom_headers = nil)
      response = begin_resume_data_warehouse_async(resource_group_name, server_name, database_name, custom_headers).value!
      nil
    end

    #
    # Resume an Azure SQL Data Warehouse database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Data Warehouse
    # database to resume.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_resume_data_warehouse_with_http_info(resource_group_name, server_name, database_name, custom_headers = nil)
      begin_resume_data_warehouse_async(resource_group_name, server_name, database_name, custom_headers).value!
    end

    #
    # Resume an Azure SQL Data Warehouse database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Data Warehouse
    # database to resume.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_resume_data_warehouse_async(resource_group_name, server_name, database_name, custom_headers = nil)
      api_version = '2014-04-01'
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'server_name is nil' if server_name.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/resume'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'serverName' => server_name,'databaseName' => database_name},
          query_params: {'api-version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202 || status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Returns a list of Azure SQL database restore points.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database from which
    # to retrieve available restore points.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RestorePointListResult] operation results.
    #
    def list_restore_points(resource_group_name, server_name, database_name, custom_headers = nil)
      response = list_restore_points_async(resource_group_name, server_name, database_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns a list of Azure SQL database restore points.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database from which
    # to retrieve available restore points.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_restore_points_with_http_info(resource_group_name, server_name, database_name, custom_headers = nil)
      list_restore_points_async(resource_group_name, server_name, database_name, custom_headers).value!
    end

    #
    # Returns a list of Azure SQL database restore points.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database from which
    # to retrieve available restore points.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_restore_points_async(resource_group_name, server_name, database_name, custom_headers = nil)
      api_version = '2014-04-01'
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'server_name is nil' if server_name.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'serverName' => server_name,'databaseName' => database_name},
          query_params: {'api-version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = RestorePointListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Creates a new Azure SQL database or updates an existing Azure SQL database.
    # Location is a required property in the request body and it must be the
    # same as the location of the Sql Server.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database to be
    # operated on (Updated or created).
    # @param parameters [Database] The required parameters for creating or
    # updating a database.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Database] operation results.
    #
    def create_or_update(resource_group_name, server_name, database_name, parameters, custom_headers = nil)
      response = create_or_update_async(resource_group_name, server_name, database_name, parameters, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database to be
    # operated on (Updated or created).
    # @param parameters [Database] The required parameters for creating or
    # updating a database.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def create_or_update_async(resource_group_name, server_name, database_name, parameters, custom_headers = nil)
      # Send request
      promise = begin_create_or_update_async(resource_group_name, server_name, database_name, parameters, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Database.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response, 'parsed_response')
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Creates a new Azure SQL database or updates an existing Azure SQL database.
    # Location is a required property in the request body and it must be the
    # same as the location of the Sql Server.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database to be
    # operated on (Updated or created).
    # @param parameters [Database] The required parameters for creating or
    # updating a database.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Database] operation results.
    #
    def begin_create_or_update(resource_group_name, server_name, database_name, parameters, custom_headers = nil)
      response = begin_create_or_update_async(resource_group_name, server_name, database_name, parameters, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Creates a new Azure SQL database or updates an existing Azure SQL database.
    # Location is a required property in the request body and it must be the
    # same as the location of the Sql Server.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database to be
    # operated on (Updated or created).
    # @param parameters [Database] The required parameters for creating or
    # updating a database.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_create_or_update_with_http_info(resource_group_name, server_name, database_name, parameters, custom_headers = nil)
      begin_create_or_update_async(resource_group_name, server_name, database_name, parameters, custom_headers).value!
    end

    #
    # Creates a new Azure SQL database or updates an existing Azure SQL database.
    # Location is a required property in the request body and it must be the
    # same as the location of the Sql Server.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database to be
    # operated on (Updated or created).
    # @param parameters [Database] The required parameters for creating or
    # updating a database.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_create_or_update_async(resource_group_name, server_name, database_name, parameters, custom_headers = nil)
      api_version = '2014-04-01'
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'server_name is nil' if server_name.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'parameters is nil' if parameters.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Database.mapper()
      request_content = @client.serialize(request_mapper,  parameters, 'parameters')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'serverName' => server_name,'databaseName' => database_name},
          query_params: {'api-version' => api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Database.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Database.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 202
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Database.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes an Azure SQL database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database to be
    # deleted.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete(resource_group_name, server_name, database_name, custom_headers = nil)
      response = delete_async(resource_group_name, server_name, database_name, custom_headers).value!
      nil
    end

    #
    # Deletes an Azure SQL database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database to be
    # deleted.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_with_http_info(resource_group_name, server_name, database_name, custom_headers = nil)
      delete_async(resource_group_name, server_name, database_name, custom_headers).value!
    end

    #
    # Deletes an Azure SQL database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database to be
    # deleted.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_async(resource_group_name, server_name, database_name, custom_headers = nil)
      api_version = '2014-04-01'
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'server_name is nil' if server_name.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'serverName' => server_name,'databaseName' => database_name},
          query_params: {'api-version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Returns information about an Azure SQL database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database to be
    # retrieved.
    # @param expand [String] The comma separated list of child objects to expand
    # in the response. Possible properties: serviceTierAdvisors, upgradeHint,
    # transparentDataEncryption.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Database] operation results.
    #
    def get(resource_group_name, server_name, database_name, expand = nil, custom_headers = nil)
      response = get_async(resource_group_name, server_name, database_name, expand, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns information about an Azure SQL database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database to be
    # retrieved.
    # @param expand [String] The comma separated list of child objects to expand
    # in the response. Possible properties: serviceTierAdvisors, upgradeHint,
    # transparentDataEncryption.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(resource_group_name, server_name, database_name, expand = nil, custom_headers = nil)
      get_async(resource_group_name, server_name, database_name, expand, custom_headers).value!
    end

    #
    # Returns information about an Azure SQL database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database to be
    # retrieved.
    # @param expand [String] The comma separated list of child objects to expand
    # in the response. Possible properties: serviceTierAdvisors, upgradeHint,
    # transparentDataEncryption.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(resource_group_name, server_name, database_name, expand = nil, custom_headers = nil)
      api_version = '2014-04-01'
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'server_name is nil' if server_name.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'serverName' => server_name,'databaseName' => database_name},
          query_params: {'api-version' => api_version,'$expand' => expand},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Database.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Returns information about an Azure SQL Database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DatabaseListResult] operation results.
    #
    def list_by_server(resource_group_name, server_name, custom_headers = nil)
      response = list_by_server_async(resource_group_name, server_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns information about an Azure SQL Database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_by_server_with_http_info(resource_group_name, server_name, custom_headers = nil)
      list_by_server_async(resource_group_name, server_name, custom_headers).value!
    end

    #
    # Returns information about an Azure SQL Database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_by_server_async(resource_group_name, server_name, custom_headers = nil)
      api_version = '2014-04-01'
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'server_name is nil' if server_name.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'serverName' => server_name},
          query_params: {'api-version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = DatabaseListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Returns information about Azure SQL Database usages.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DatabaseMetricListResult] operation results.
    #
    def list_usages(resource_group_name, server_name, database_name, custom_headers = nil)
      response = list_usages_async(resource_group_name, server_name, database_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns information about Azure SQL Database usages.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_usages_with_http_info(resource_group_name, server_name, database_name, custom_headers = nil)
      list_usages_async(resource_group_name, server_name, database_name, custom_headers).value!
    end

    #
    # Returns information about Azure SQL Database usages.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_usages_async(resource_group_name, server_name, database_name, custom_headers = nil)
      api_version = '2014-04-01'
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'server_name is nil' if server_name.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/usages'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'serverName' => server_name,'databaseName' => database_name},
          query_params: {'api-version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = DatabaseMetricListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Returns information about a service tier advisor.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of database.
    # @param service_tier_advisor_name [String] The name of service tier advisor.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ServiceTierAdvisor] operation results.
    #
    def get_service_tier_advisor(resource_group_name, server_name, database_name, service_tier_advisor_name, custom_headers = nil)
      response = get_service_tier_advisor_async(resource_group_name, server_name, database_name, service_tier_advisor_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns information about a service tier advisor.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of database.
    # @param service_tier_advisor_name [String] The name of service tier advisor.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_service_tier_advisor_with_http_info(resource_group_name, server_name, database_name, service_tier_advisor_name, custom_headers = nil)
      get_service_tier_advisor_async(resource_group_name, server_name, database_name, service_tier_advisor_name, custom_headers).value!
    end

    #
    # Returns information about a service tier advisor.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of database.
    # @param service_tier_advisor_name [String] The name of service tier advisor.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_service_tier_advisor_async(resource_group_name, server_name, database_name, service_tier_advisor_name, custom_headers = nil)
      api_version = '2014-04-01'
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'server_name is nil' if server_name.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'service_tier_advisor_name is nil' if service_tier_advisor_name.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/serviceTierAdvisors/{serviceTierAdvisorName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'serverName' => server_name,'databaseName' => database_name,'serviceTierAdvisorName' => service_tier_advisor_name},
          query_params: {'api-version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ServiceTierAdvisor.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Returns information about service tier advisors for specified database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of database.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ServiceTierAdvisorListResult] operation results.
    #
    def list_service_tier_advisors(resource_group_name, server_name, database_name, custom_headers = nil)
      response = list_service_tier_advisors_async(resource_group_name, server_name, database_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns information about service tier advisors for specified database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of database.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_service_tier_advisors_with_http_info(resource_group_name, server_name, database_name, custom_headers = nil)
      list_service_tier_advisors_async(resource_group_name, server_name, database_name, custom_headers).value!
    end

    #
    # Returns information about service tier advisors for specified database.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of database.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_service_tier_advisors_async(resource_group_name, server_name, database_name, custom_headers = nil)
      api_version = '2014-04-01'
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'server_name is nil' if server_name.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/serviceTierAdvisors'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'serverName' => server_name,'databaseName' => database_name},
          query_params: {'api-version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ServiceTierAdvisorListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Creates or updates an Azure SQL Database Transparent Data Encryption
    # Operation.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database for which
    # setting the Transparent Data Encryption applies.
    # @param parameters [TransparentDataEncryption] The required parameters for
    # creating or updating transparent data encryption.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [TransparentDataEncryption] operation results.
    #
    def create_or_update_transparent_data_encryption_configuration(resource_group_name, server_name, database_name, parameters, custom_headers = nil)
      response = create_or_update_transparent_data_encryption_configuration_async(resource_group_name, server_name, database_name, parameters, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Creates or updates an Azure SQL Database Transparent Data Encryption
    # Operation.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database for which
    # setting the Transparent Data Encryption applies.
    # @param parameters [TransparentDataEncryption] The required parameters for
    # creating or updating transparent data encryption.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_or_update_transparent_data_encryption_configuration_with_http_info(resource_group_name, server_name, database_name, parameters, custom_headers = nil)
      create_or_update_transparent_data_encryption_configuration_async(resource_group_name, server_name, database_name, parameters, custom_headers).value!
    end

    #
    # Creates or updates an Azure SQL Database Transparent Data Encryption
    # Operation.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database for which
    # setting the Transparent Data Encryption applies.
    # @param parameters [TransparentDataEncryption] The required parameters for
    # creating or updating transparent data encryption.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_or_update_transparent_data_encryption_configuration_async(resource_group_name, server_name, database_name, parameters, custom_headers = nil)
      api_version = '2014-04-01'
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'server_name is nil' if server_name.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'parameters is nil' if parameters.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = TransparentDataEncryption.mapper()
      request_content = @client.serialize(request_mapper,  parameters, 'parameters')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption/current'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'serverName' => server_name,'databaseName' => database_name},
          query_params: {'api-version' => api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = TransparentDataEncryption.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = TransparentDataEncryption.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Returns an Azure SQL Database Transparent Data Encryption Response.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database for which
    # the Transparent Data Encryption applies.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [TransparentDataEncryption] operation results.
    #
    def get_transparent_data_encryption_configuration(resource_group_name, server_name, database_name, custom_headers = nil)
      response = get_transparent_data_encryption_configuration_async(resource_group_name, server_name, database_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns an Azure SQL Database Transparent Data Encryption Response.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database for which
    # the Transparent Data Encryption applies.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_transparent_data_encryption_configuration_with_http_info(resource_group_name, server_name, database_name, custom_headers = nil)
      get_transparent_data_encryption_configuration_async(resource_group_name, server_name, database_name, custom_headers).value!
    end

    #
    # Returns an Azure SQL Database Transparent Data Encryption Response.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database for which
    # the Transparent Data Encryption applies.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_transparent_data_encryption_configuration_async(resource_group_name, server_name, database_name, custom_headers = nil)
      api_version = '2014-04-01'
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'server_name is nil' if server_name.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption/current'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'serverName' => server_name,'databaseName' => database_name},
          query_params: {'api-version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = TransparentDataEncryption.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Returns an Azure SQL Database Transparent Data Encryption Activity Response.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database for which
    # the Transparent Data Encryption applies.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [TransparentDataEncryptionActivityListResult] operation results.
    #
    def list_transparent_data_encryption_activity(resource_group_name, server_name, database_name, custom_headers = nil)
      response = list_transparent_data_encryption_activity_async(resource_group_name, server_name, database_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns an Azure SQL Database Transparent Data Encryption Activity Response.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database for which
    # the Transparent Data Encryption applies.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_transparent_data_encryption_activity_with_http_info(resource_group_name, server_name, database_name, custom_headers = nil)
      list_transparent_data_encryption_activity_async(resource_group_name, server_name, database_name, custom_headers).value!
    end

    #
    # Returns an Azure SQL Database Transparent Data Encryption Activity Response.
    #
    # @param resource_group_name [String] The name of the Resource Group to which
    # the resource belongs.
    # @param server_name [String] The name of the Azure SQL Server
    # @param database_name [String] The name of the Azure SQL Database for which
    # the Transparent Data Encryption applies.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_transparent_data_encryption_activity_async(resource_group_name, server_name, database_name, custom_headers = nil)
      api_version = '2014-04-01'
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'server_name is nil' if server_name.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption/current/operationResults'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'serverName' => server_name,'databaseName' => database_name},
          query_params: {'api-version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = TransparentDataEncryptionActivityListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

  end
end
